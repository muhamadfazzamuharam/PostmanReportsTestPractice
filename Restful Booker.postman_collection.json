{
	"info": {
		"_postman_id": "5ca0e8d5-9485-4823-a6c9-4c0fea599018",
		"name": "Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22313749"
	},
	"item": [
		{
			"name": "Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response;\r",
							"\r",
							"pm.test('The api should return a 200/201 status code', function () {\r",
							"    pm.expect(pm.response.code).to.have.oneOf([201, 200], `Actual response is ${response.code}`);\r",
							"    pm.response.to.have.body;\r",
							"    pm.expect(response.text()).to.eql('Created');\r",
							"});\r",
							"\r",
							"// pm.test('The api should return a Created message', function () {\r",
							"//     pm.execution.setNextRequest('Auth');\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-mock-response-name",
						"value": "Internal Server Error",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{rb_url}}/ping",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": [
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rb_url}}/ping",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "",
					"header": [],
					"cookie": [
						{
							"expires": "Invalid Date",
							"domain": "",
							"path": ""
						}
					],
					"body": "Internal Server Error"
				}
			]
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"token\", response.token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.have.jsonBody('token');\r",
							"    pm.expect(response.token).to.not.be.null;\r",
							"    pm.expect(response.token).to.not.be.undefined;\r",
							"    pm.expect(response.token).to.be.a('string'); \r",
							"});\r",
							"\r",
							"\r",
							"// pm.execution.setNextRequest(null);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-mock-response-name",
						"value": "Auth Token Missing",
						"type": "text",
						"disabled": true
					},
					{
						"key": "x-mock-response-name",
						"value": "Auth",
						"type": "text",
						"disabled": true
					},
					{
						"key": "x-mock-response-name",
						"value": "Auth Empty Username",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
				},
				"url": {
					"raw": "{{rb_url}}/auth",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": [
				{
					"name": "Auth",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-mock-response-name",
								"value": "Auth Token Missing",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-mock-response-name",
								"value": "Auth",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-mock-response-name",
								"value": "Auth Empty Username",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "Created"
				},
				{
					"name": "Auth Empty Username",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"\",\n    \"password\" : \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "Unprocessable Content",
					"code": 422,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Unprocessable Entity\",\n  \"message\": \"Username cannot be empty\"\n}\n"
				},
				{
					"name": "Auth Empty Password",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Unprocessable Entity\",\n  \"message\": \"Password cannot be empty\"\n}\n"
				},
				{
					"name": "Auth Empty Username & Password",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"\",\n    \"password\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "Unprocessable Content",
					"code": 422,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Unprocessable Entity\",\n  \"message\": \"Username or passord cannot be empty\"\n}\n"
				},
				{
					"name": "Auth Field Username Missing",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Bad Request\",\n  \"message\": \"Username is required\"\n}\n"
				},
				{
					"name": "Auth Field Password Missing",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rb_url}}/auth",
							"host": [
								"{{rb_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"Bad Request\",\n  \"message\": \"Password is required\"\n}\n"
				}
			]
		},
		{
			"name": "Get All Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const data = pm.response.json();\r",
							"const randomNumber = Math.random() * data.length;\r",
							"const floor = Math.floor(randomNumber);\r",
							"\r",
							"pm.collectionVariables.set('bookingid', data[floor].bookingid);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{rb_url}}/booking",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const data = pm.response.json();\r",
							"\r",
							"const vars = {\r",
							"    newFirstName: data.firstname,\r",
							"    newLastName: data.lastname,\r",
							"    totalprice: data.totalprice,\r",
							"    depositpaid: data.depositpaid,\r",
							"    checkin: data.bookingdates.checkin,\r",
							"    checkout: data.bookingdates.checkout\r",
							"};\r",
							"\r",
							"for (let key in vars) {\r",
							"    pm.collectionVariables.set(key, vars[key]);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{rb_url}}/booking/{{bookingid}}",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking By Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should equal 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{rb_url}}/booking?firstname={{newFirstName}}&lastname={{newLastName}}",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{newFirstName}}"
						},
						{
							"key": "lastname",
							"value": "{{newLastName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bookings By Date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should be an empty array\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{rb_url}}/booking?checkin={{checkin}}&checkout={{checkout}}",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}"
						},
						{
							"key": "checkout",
							"value": "{{checkout}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should equal 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\": \"{{$randomFirstName}}\",\n    \"lastname\": \"{{$randomLastName}}\",\n    \"totalprice\": {{$randomPrice}},\n    \"depositpaid\": {{$randomBoolean}},\n    \"bookingdates\": {\n        \"checkin\": \"{{$randomDateRecent}}\",\n        \"checkout\": \"{{$randomDateFuture}}\"\n    },\n    \"additionalneeds\": \"{{$randomWords}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{rb_url}}/booking",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Name should be updated correctly\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const firstName = pm.collectionVariables.get(\"updatedFirstName\");\r",
							"    const lastName = pm.collectionVariables.get(\"updatedLastName\");\r",
							"    pm.expect(response.firstname).to.eql(firstName);\r",
							"    pm.expect(response.lastname).to.eql(lastName);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const name = {\r",
							"    updatedFirstName   : pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"    updatedLastName    : pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"};\r",
							"\r",
							"for (let key in name) {\r",
							"    pm.collectionVariables.set(key, name[key]);\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{updatedFirstName}}\",\n    \"lastname\" : \"{{updatedLastName}}\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}"
				},
				"url": {
					"raw": "{{rb_url}}/booking/{{bookingid}}",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Name should be updated correctly\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const firstName = pm.collectionVariables.get(\"partialUpdatedFirstName\");\r",
							"    const lastName = pm.collectionVariables.get(\"partialUpdatedLastName\");\r",
							"    pm.expect(response.firstname).to.eql(firstName);\r",
							"    pm.expect(response.lastname).to.eql(lastName);\r",
							"    console.log(`${firstName} equal to ${response.firstname}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const name = {\r",
							"    partialUpdatedFirstName   : pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
							"    partialUpdatedLastName    : pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"};\r",
							"\r",
							"for (let key in name) {\r",
							"    pm.collectionVariables.set(key, name[key]);\r",
							"};"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{partialUpdatedFirstName}}\",\n    \"lastname\" : \"{{partialUpdatedLastName}}\"\n}"
				},
				"url": {
					"raw": "{{rb_url}}/booking/{{bookingid}}",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"checkDeletedTheBookingId();\r",
							"\r",
							"function checkDeletedTheBookingId() {\r",
							"    const rb_url = pm.environment.get(\"rb_url\");\r",
							"    const bookingid = pm.collectionVariables.get(\"bookingid\");\r",
							"    \r",
							"    pm.sendRequest({\r",
							"        url: `${rb_url}/booking`,\r",
							"        method: \"GET\"\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        } else {\r",
							"            const response = res.json();\r",
							"            const allBookingIds = response.map(item => item.bookingid);\r",
							"            pm.test(\"Bookingid was deleted\", function () {\r",
							"                pm.expect(allBookingIds).not.include(bookingid);\r",
							"            });\r",
							"            console.log(`Check deleted bookingid: ${bookingid}`);\r",
							"        };\r",
							"    });\r",
							"};\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const _ = require('lodash');\r",
							"const rb_url = pm.environment.get(\"rb_url\");\r",
							"\r",
							"// function loginAndGetBooking() {\r",
							"//     pm.sendRequest({\r",
							"//         url: `${rb_url}/auth`,\r",
							"//         method: \"POST\",\r",
							"//         header: {\r",
							"//             \"Content-Type\": \"application/json\"\r",
							"//         },\r",
							"//         body: {\r",
							"//             mode: \"raw\",\r",
							"//             raw: JSON.stringify({\r",
							"//                 username: \"admin\",\r",
							"//                 password: \"password123\"\r",
							"//             })\r",
							"//         }\r",
							"//     }, function (err, res) {\r",
							"//         if (err) {\r",
							"//             console.log(\"Auth error:\", err);\r",
							"//             return;\r",
							"//         }\r",
							"\r",
							"//         const loginRes = res.json();\r",
							"//         if (!loginRes.token) {\r",
							"//             console.log(\"❌ Token not found in response\");\r",
							"//             return;\r",
							"//         }\r",
							"\r",
							"//         pm.collectionVariables.set(\"token\", loginRes.token);\r",
							"//         console.log(\"Token saved!!:\", loginRes.token);\r",
							"\r",
							"//         getRandomBooking();\r",
							"//     });\r",
							"// };\r",
							"\r",
							"\r",
							"function getRandomBooking() {\r",
							"    pm.sendRequest({\r",
							"        url: `${rb_url}/booking`,\r",
							"        method: \"GET\",\r",
							"        header: {\r",
							"            \"Accept\": \"application/json\",\r",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"token\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.log(\"Booking error:\", err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        const response = res.json();\r",
							"\r",
							"        if (Array.isArray(response) && response.length > 0) {\r",
							"            const randomBooking = _.sample(response);\r",
							"            pm.collectionVariables.set(\"bookingid\", randomBooking.bookingid);\r",
							"            console.log(\"Random booking ID saved!!:\", randomBooking.bookingid);\r",
							"        } else {\r",
							"            console.log(\"No bookings found in response\");\r",
							"        };\r",
							"    });\r",
							"};\r",
							"getRandomBooking();\r",
							"\r",
							"// loginAndGetBooking();\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"url": {
					"raw": "{{rb_url}}/booking/{{bookingid}}",
					"host": [
						"{{rb_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": ""
		},
		{
			"key": "bookingid",
			"value": ""
		},
		{
			"key": "totalprice",
			"value": ""
		},
		{
			"key": "depositpaid",
			"value": ""
		},
		{
			"key": "checkin",
			"value": ""
		},
		{
			"key": "checkout",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "cookie",
			"value": ""
		},
		{
			"key": "updatedFirstName",
			"value": ""
		},
		{
			"key": "updatedLastName",
			"value": ""
		},
		{
			"key": "newFirstName",
			"value": ""
		},
		{
			"key": "newLastName",
			"value": ""
		},
		{
			"key": "partialUpdatedFirstName",
			"value": ""
		},
		{
			"key": "partialUpdatedLastName",
			"value": ""
		}
	]
}